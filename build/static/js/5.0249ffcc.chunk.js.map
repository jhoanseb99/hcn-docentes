{"version":3,"sources":["app/components/UI/BaseCardSection.jsx","app/components/UI/BaseModal.jsx","app/modules/Activities/utils/ActivityForm.jsx","app/modules/Activities/components/CreateActivityDialog.jsx","app/modules/Activities/components/UpdateActivityDialog.jsx","app/components/UI/BaseDialog.jsx","app/pages/Activities.jsx","app/modules/Announcements/components/CreateAnnDialog.jsx","app/modules/Announcements/components/UpdateAnnDialog.jsx","app/pages/Announcements.jsx","app/modules/ClinicalCases/utils/CCaseForm.jsx","app/modules/ClinicalCases/components/CreateCCaseDialog.jsx","app/modules/ClinicalCases/components/AddCCaseDialog.jsx","app/modules/ClinicalCases/components/UpdateCCaseDialog.jsx","app/pages/CCasesPage.jsx","app/modules/HCN/components/AddHcnDialog.jsx","app/pages/HcnPage.jsx","app/pages/GradePage.jsx","app/pages/StudentsPage.jsx","app/modules/Courses/CoursesRoute.js"],"names":["BaseCardSection","props","title","toolbar","children","others","className","map","index","key","BaseModal","open","handleClose","actions","Modal","show","onHide","Header","closeButton","Title","Body","Footer","action","content","ActivityForm","handleSubmit","ccasesList","hcnList","activity","initialValues","Description","Type","LimitDate","moment","format","HCNID","ClinicalCaseID","Difficulty","activitySchema","Yup","shape","required","matches","formik","useFormik","validationSchema","onSubmit","values","setTimeout","parseInt","setSubmitting","actionButtons","onClick","type","htmlFor","name","touched","errors","getFieldProps","style","minHeight","id","value","ID","event","preventDefault","hcn_data","find","length","window","MongoID","disabled","isSubmitting","CircularProgress","size","color","CreateActivityDialog","useSelector","hcn","clinicalCases","dispatch","useDispatch","createActivity","then","UpdateActivityDialog","updateActivity","BaseDialog","Dialog","DialogTitle","DialogContent","DialogActions","Button","Activities","activitieslist","state","activities","history","useHistory","React","useState","openCreateDialog","setOpenCreateDialog","openUpdateDialog","setOpenUpdateDialog","confirmDelete","setConfirmDelete","undefined","activityValue","setActivityValue","useEffect","getActivitiesList","backgroundColor","push","handleGrade","CreationDate","onClose","deleteActivity","dispatchDelete","CreateAnnDialog","annSchema","setStatus","handleCreate","createAnnouncement","UpdateAnnDialog","announcement","handleUpdate","updateAnnouncement","Announcements","announcementslist","announcements","annValue","setAnnValue","getAnnouncementsList","deleteAnnouncement","CCaseForm","clinical_case","Media","handleInputsChange","a","target","blobPDF","Blob","files","reader","FileReader","readAsDataURL","onloadend","result","split","handleChange","setFieldValue","onChange","CreateCCaseDialog","createCCase","AddCCaseDialog","ccase_id","setCCaseId","handleAdd","ok","validateInputs","addCCaseToCourse","UpdateCCaseDialog","updateCCase","CCasesPage","ccasesListByCourse","openAddDialog","setOpenAddDialog","func","ccaseValue","setCcaseValue","getCCasesListByCourse","closeDeleteModal","prevState","deleteCCaseByCourse","dispatchRemove","removeCCase","handleDelete","data","console","log","AddHcnDialog","hcn_id","setHcnId","hcnRedux","addHcnToCourse","HcnPage","hcnListByCourse","hcnObject","hcnValue","setHcnValue","getHcnListByCourse","deleteHcn","removeHcn","BaseSection","CardGridContainer","height","to","GradePage","match","params","students","auth","gradeList","studentsList","user","studentData","setStudentData","getAllSolvedHcn","student_data","forEach","student","filter","element","Reviewed","Solver","Name","StudentsPage","courses","currentCourse","getAllStudentsCourse","CoursesRoute","getCourseData","exact","from","path","component"],"mappings":"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","file":"static/js/5.0249ffcc.chunk.js","sourcesContent":["function BaseCardSection(props) {\r\n  const { title, toolbar, children, ...others } = props;\r\n  return (\r\n    <div className=\"container-fluid h-100\">\r\n      <div className=\"card\" { ...others }>\r\n        <div className=\"card-header bg-white\">\r\n          <div className=\"d-flex row align-items-center\">\r\n            <div className=\"col\">\r\n              <h3 className=\"text-dark\">{ title }</h3>\r\n            </div>\r\n            { toolbar && \r\n              <div className=\"col text-right\">\r\n                {toolbar.map(({ title, ...props }, index) => (\r\n                  <button { ...props } key={ index }>{ title }</button>\r\n                ))}\r\n              </div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body h-100\">\r\n          { children }\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default BaseCardSection;","import React from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nfunction BaseModal(props) {\r\n  const { open, title, handleClose, actions, children, ...others } = props;\r\n  return (\r\n    <Modal show={open} onHide={handleClose} {...others}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{ title }</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className=\"p-4\">\r\n        { children }\r\n      </Modal.Body>\r\n      {actions && \r\n        <Modal.Footer>\r\n          {actions.map((action, index) => {\r\n            const { content, ...props } = action;\r\n            return (\r\n              <button \r\n                className={props.className ? props.className : \"btn btn-primary\"} key={ index }\r\n                { ...props } \r\n              >\r\n                  { content }\r\n              </button>\r\n            );\r\n          })}\r\n        </Modal.Footer>\r\n      }\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default BaseModal;","import { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nfunction ActivityForm(props) {\r\n  const {\r\n    handleSubmit,\r\n    handleClose,\r\n    ccasesList = [],\r\n    hcnList = [],\r\n    activity,\r\n  } = props;\r\n\r\n  const initialValues = {\r\n    Title: activity ? activity.Title : \"\",\r\n    Description: activity ? activity.Description : \"\",\r\n    Type: activity ? activity.Type : \"\",\r\n    LimitDate: activity\r\n      ? moment(activity.LimitDate).format(\"yyyy-MM-DDThh:mm:ss\")\r\n      : \"\",\r\n    HCNID: activity ? activity.HCNID : \"\",\r\n    ClinicalCaseID: activity ? activity.ClinicalCaseID : \"\",\r\n    Difficulty: activity ? activity.Difficulty : \"1\",\r\n  };\r\n\r\n  const activitySchema = Yup.object().shape({\r\n    Title: Yup.string().required(\"Campo requerido\"),\r\n    Description: Yup.string().required(\"Campo requerido\"),\r\n    Type: Yup.string().required(\"Campo requerido\"),\r\n    LimitDate: Yup.string().required(\"Campo requerido\"),\r\n    HCNID: Yup.string().required(\"Campo requerido\"),\r\n    ClinicalCaseID: Yup.string().required(\"Campo requerido\"),\r\n    Difficulty: Yup.string()\r\n      .matches(/^[0-9]*$/)\r\n      .required(\"Campo requerido\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: activitySchema,\r\n    onSubmit: (values, actions) => {\r\n      setTimeout(() => {\r\n        handleSubmit({\r\n          ...values,\r\n          Difficulty: parseInt(values.Difficulty),\r\n          ClinicalCaseID: parseInt(values.ClinicalCaseID),\r\n          HCNID: parseInt(values.HCNID),\r\n        });\r\n        actions.setSubmitting(false);\r\n      }, 1000);\r\n    },\r\n  });\r\n\r\n  const actionButtons = [\r\n    {\r\n      content: `${activity ? \"Actualizar\" : \"Crear\"} actividad`,\r\n      onClick: formik.handleSubmit,\r\n      type: \"submit\",\r\n    },\r\n    {\r\n      content: \"Cancelar\",\r\n      onClick: () => handleClose(),\r\n      className: \"btn btn-secondary ml-2\",\r\n      type: \"button\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"Title\">Título</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"Title\"\r\n          className={`form-control ${\r\n            formik.touched.Title\r\n              ? formik.errors.Title\r\n                ? \"is-invalid\"\r\n                : \"is-valid\"\r\n              : \"\"\r\n          }`}\r\n          {...formik.getFieldProps(\"Title\")}\r\n        />\r\n        <div className=\"invalid-feedback\">{formik.errors.Title}</div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"Description\">Descripción</label>\r\n        <textarea\r\n          type=\"text\"\r\n          name=\"Description\"\r\n          className=\"form-control\"\r\n          style={{ minHeight: \"100px\" }}\r\n          className={`form-control ${\r\n            formik.touched.Description\r\n              ? formik.errors.Description\r\n                ? \"is-invalid\"\r\n                : \"is-valid\"\r\n              : \"\"\r\n          }`}\r\n          {...formik.getFieldProps(\"Description\")}\r\n        />\r\n        <div className=\"invalid-feedback\">{formik.errors.Description}</div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"Type\">Tipo</label>\r\n        <select\r\n          name=\"Type\"\r\n          id=\"Type\"\r\n          className={`form-control ${\r\n            formik.touched.Type\r\n              ? formik.errors.Type\r\n                ? \"is-invalid\"\r\n                : \"is-valid\"\r\n              : \"\"\r\n          }`}\r\n          {...formik.getFieldProps(\"Type\")}\r\n        >\r\n          <option value=\"\">Seleccionar</option>\r\n          <option value=\"Calificable\">Calificable</option>\r\n          <option value=\"Prueba\">No calificable</option>\r\n        </select>\r\n        <div className=\"invalid-feedback\">{formik.errors.Type}</div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"LimitDate\">Fecha de entrega</label>\r\n        <input\r\n          type=\"datetime-local\"\r\n          name=\"LimitDate\"\r\n          className={`form-control ${\r\n            formik.touched.LimitDate\r\n              ? formik.errors.LimitDate\r\n                ? \"is-invalid\"\r\n                : \"is-valid\"\r\n              : \"\"\r\n          }`}\r\n          {...formik.getFieldProps(\"LimitDate\")}\r\n        />\r\n        <div className=\"invalid-feedback\">{formik.errors.LimitDate}</div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"HCNID\">Historia Clínica Nutricional asociada</label>\r\n        <div className=\"row\">\r\n          <div className=\"col-10\">\r\n            <select\r\n              name=\"HCNID\"\r\n              id=\"HCNID\"\r\n              className=\"form-control\"\r\n              className={`form-control ${\r\n                formik.touched.HCNID\r\n                  ? formik.errors.HCNID\r\n                    ? \"is-invalid\"\r\n                    : \"is-valid\"\r\n                  : \"\"\r\n              }`}\r\n              {...formik.getFieldProps(\"HCNID\")}\r\n            >\r\n              <option value=\"\">Seleccionar</option>\r\n              {hcnList.map(({ ID }) => (\r\n                <option value={ID} key={ID}>\r\n                  {ID}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <div className=\"invalid-feedback\">{formik.errors.HCNID}</div>\r\n          </div>\r\n          <div className=\"col-2 text-right\">\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={(event) => {\r\n                event.preventDefault();\r\n                let hcn_data = hcnList.find(\r\n                  (value) => value.ID == formik.values.HCNID\r\n                );\r\n                if (formik.values.HCNID.length && hcn_data) {\r\n                  window.open(`/hcn/update/${hcn_data.MongoID}`);\r\n                }\r\n              }}\r\n            >\r\n              Ver\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"ClinicalCaseID\">Caso Clínico asociado</label>\r\n        <div className=\"row\">\r\n          <div className=\"col-10\">\r\n            <select\r\n              name=\"ClinicalCaseID\"\r\n              id=\"ClinicalCaseID\"\r\n              className={`form-control ${\r\n                formik.touched.ClinicalCaseID\r\n                  ? formik.errors.ClinicalCaseID\r\n                    ? \"is-invalid\"\r\n                    : \"is-valid\"\r\n                  : \"\"\r\n              }`}\r\n              {...formik.getFieldProps(\"ClinicalCaseID\")}\r\n            >\r\n              <option value=\"\">Seleccionar</option>\r\n              {ccasesList.map(({ ID, Title }) => (\r\n                <option value={ID} key={ID}>\r\n                  {Title}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <div className=\"invalid-feedback\">\r\n              {formik.errors.ClinicalCaseID}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-2 text-right\">\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={(event) => {\r\n                event.preventDefault();\r\n                if (formik.values.ClinicalCaseID !== \"\")\r\n                  window.open(\r\n                    `/clinical-cases/${formik.values.ClinicalCaseID}`\r\n                  );\r\n              }}\r\n            >\r\n              Ver\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"Difficulty\">Dificultad</label>\r\n        <select\r\n          name=\"Difficulty\"\r\n          id=\"Difficulty\"\r\n          className=\"form-control\"\r\n          className={`form-control ${\r\n            formik.touched.Difficulty\r\n              ? formik.errors.Difficulty\r\n                ? \"is-invalid\"\r\n                : \"is-valid\"\r\n              : \"\"\r\n          }`}\r\n          {...formik.getFieldProps(\"Difficulty\")}\r\n        >\r\n          {[1, 2, 3, 4, 5].map((value) => (\r\n            <option value={value} key={value}>\r\n              {value}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <div className=\"invalid-feedback\">{formik.errors.Difficulty}</div>\r\n      </div>\r\n\r\n      {actionButtons && (\r\n        <div className=\"text-right\">\r\n          {actionButtons.map((action, index) => {\r\n            const { content, ...props } = action;\r\n            return (\r\n              <button\r\n                className={\r\n                  props.className ? props.className : \"btn btn-primary\"\r\n                }\r\n                disabled={formik.isSubmitting}\r\n                key={index}\r\n                {...props}\r\n              >\r\n                {content}\r\n                {props.type === \"submit\" && formik.isSubmitting && (\r\n                  <CircularProgress\r\n                    className=\"ml-2\"\r\n                    size={10}\r\n                    color=\"inherit\"\r\n                  />\r\n                )}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ActivityForm;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { actions } from \"../_redux/activitiesRedux\";\r\n\r\nimport BaseModal from \"../../../components/UI/BaseModal.jsx\";\r\nimport ActivityForm from \"../utils/ActivityForm\";\r\n\r\nfunction CreateActivityDialog({ open, handleClose }) {\r\n  const { hcnList, ccasesList } = useSelector(({ hcn, clinicalCases }) => ({\r\n    hcnList: hcn.hcnList,\r\n    ccasesList: clinicalCases.ccasesList,\r\n  }));\r\n  const dispatch = useDispatch();\r\n  const handleCreate = (values) => {\r\n    dispatch(actions.createActivity(values)).then(() => handleClose());\r\n  };\r\n\r\n  return (\r\n    <BaseModal\r\n      title=\"Crear nueva actividad\"\r\n      open={open}\r\n      handleClose={handleClose}\r\n      size=\"lg\"\r\n    >\r\n      <ActivityForm\r\n        hcnList={hcnList}\r\n        handleSubmit={handleCreate}\r\n        handleClose={handleClose}\r\n        ccasesList={ccasesList}\r\n      />\r\n    </BaseModal>\r\n  );\r\n}\r\n\r\nexport default CreateActivityDialog;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { actions } from \"../_redux/activitiesRedux\";\r\n\r\nimport BaseModal from \"../../../components/UI/BaseModal.jsx\";\r\nimport ActivityForm from \"../utils/ActivityForm\";\r\n\r\nfunction UpdateActivityDialog({ open, handleClose, activity }) {\r\n  const { hcnList, ccasesList } = useSelector(({ hcn, clinicalCases }) => ({\r\n    hcnList: hcn.hcnList,\r\n    ccasesList: clinicalCases.ccasesList,\r\n  }));\r\n  const dispatch = useDispatch();\r\n\r\n  const handleUpdate = (values) => {\r\n    dispatch(actions.updateActivity({ ...activity, ...values })).then(() =>\r\n      handleClose()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BaseModal\r\n      title=\"Actualizar actividad\"\r\n      open={open}\r\n      handleClose={handleClose}\r\n      size=\"lg\"\r\n    >\r\n      <ActivityForm\r\n        hcnList={hcnList}\r\n        handleSubmit={handleUpdate}\r\n        handleClose={handleClose}\r\n        ccasesList={ccasesList}\r\n        activity={activity}\r\n      />\r\n    </BaseModal>\r\n  );\r\n}\r\n\r\nexport default UpdateActivityDialog;\r\n","import React from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\n\r\nfunction BaseDialog(props) {\r\n  const { open, title, actions, children, ...others } = props;\r\n  return (\r\n    <Dialog open={open} {...others}>\r\n      <DialogTitle>{title}</DialogTitle>\r\n      <DialogContent className=\"p-4\">{children}</DialogContent>\r\n      {actions && (\r\n        <DialogActions>\r\n          {actions.map((action, index) => {\r\n            const { content, ...props } = action;\r\n            return (\r\n              <Button key={index} {...props}>\r\n                {content}\r\n              </Button>\r\n            );\r\n          })}\r\n        </DialogActions>\r\n      )}\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default BaseDialog;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\r\nimport CreateActivityDialog from \"../modules/Activities/components/CreateActivityDialog.jsx\";\r\nimport UpdateActivityDialog from \"../modules/Activities/components/UpdateActivityDialog.jsx\";\r\nimport { actions } from \"../modules/Activities/_redux/activitiesRedux\";\r\nimport BaseCardSection from \"app/components/UI/BaseCardSection.jsx\";\r\nimport BaseDialog from \"app/components/UI/BaseDialog\";\r\n\r\nexport default function Activities() {\r\n  const { activitieslist } = useSelector((state) => state.activities);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [openCreateDialog, setOpenCreateDialog] = React.useState(false);\r\n  const [openUpdateDialog, setOpenUpdateDialog] = React.useState(false);\r\n  const [confirmDelete, setConfirmDelete] = React.useState(false);\r\n  const [activityValue, setActivityValue] = React.useState(undefined);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getActivitiesList());\r\n  }, [dispatch]);\r\n\r\n  const dispatchDelete = ({ ID }) => {\r\n    dispatch(actions.deleteActivity(ID)).then(() => setConfirmDelete(false));\r\n  };\r\n\r\n  const handleDelete = (values) => {\r\n    setActivityValue(values);\r\n    setConfirmDelete(true);\r\n  };\r\n\r\n  const handleUpdate = (data) => {\r\n    setActivityValue(data);\r\n    setOpenUpdateDialog(true);\r\n  };\r\n\r\n  const handleGrade = ({ ID }) => {\r\n    history.push(`activities/${ID}`);\r\n  };\r\n\r\n  return (\r\n    <BaseCardSection\r\n      title=\"Actividades\"\r\n      toolbar={[\r\n        {\r\n          className: \"btn btn-primary btn-circle font-weight-bolder\",\r\n          onClick: () => setOpenCreateDialog(true),\r\n          title: \"Crear actividad\",\r\n        },\r\n      ]}\r\n      style={{ backgroundColor: \"#f3f6f9\" }}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {activitieslist.map((value, index) => (\r\n          <div key={index} className=\"row\">\r\n            {/* Card */}\r\n            <div className=\"card custom-card p-3 mb-5 bg-white rounded\">\r\n              {/* Card::body */}\r\n              <div className=\"card-body pt-3\">\r\n                {/* Card::body::title */}\r\n                <div className=\"card-title\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      <strong className=\"align-self-center\">\r\n                        {value.Title}\r\n                      </strong>\r\n                    </div>\r\n                    <div className=\"col text-right\">\r\n                      {value.Type === \"Calificable\" && (\r\n                        <a\r\n                          className=\"btn btn-primary font-weight-bolder font-size-sm mr-3\"\r\n                          title=\"calificar\"\r\n                          onClick={() => handleGrade(value)}\r\n                        >\r\n                          <AssignmentTurnedInIcon />\r\n                        </a>\r\n                      )}\r\n                      <a\r\n                        className=\"btn btn-info font-weight-bolder font-size-sm mr-3\"\r\n                        onClick={() => handleUpdate(value)}\r\n                        title=\"editar\"\r\n                      >\r\n                        <EditIcon />\r\n                      </a>\r\n                      <a\r\n                        className=\"btn btn-danger font-weight-bolder font-size-sm mr-3\"\r\n                        onClick={() => handleDelete(value)}\r\n                        title=\"eliminar\"\r\n                      >\r\n                        <DeleteIcon />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Card::body::info */}\r\n                <div className=\"card-body p-0\">{value.Description}</div>\r\n                <div className=\"card-body p-0 pt-2\">\r\n                  <small className=\"text-muted d-block\">\r\n                    <strong>Fecha de publicación:</strong>{\" \"}\r\n                    {moment(value.CreationDate).format(\"DD-MM-YYYY\")}\r\n                  </small>\r\n                  <small className=\"text-muted d-block\">\r\n                    <strong>Fecha de entrega:</strong>{\" \"}\r\n                    {moment(value.LimitDate).format(\"DD-MM-YYYY\")}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {openCreateDialog && (\r\n        <CreateActivityDialog\r\n          open={openCreateDialog}\r\n          handleClose={() => setOpenCreateDialog(false)}\r\n        />\r\n      )}\r\n\r\n      {openUpdateDialog && (\r\n        <UpdateActivityDialog\r\n          open={openUpdateDialog}\r\n          handleClose={() => setOpenUpdateDialog(false)}\r\n          activity={activityValue}\r\n        />\r\n      )}\r\n\r\n      {confirmDelete && (\r\n        <BaseDialog\r\n          open={confirmDelete}\r\n          onClose={() => setConfirmDelete(false)}\r\n          actions={[\r\n            {\r\n              content: \"Confirmar\",\r\n              onClick: () => dispatchDelete(activityValue),\r\n              color: \"primary\",\r\n            },\r\n            {\r\n              content: \"Cancelar\",\r\n              onClick: () => setConfirmDelete(false),\r\n              className: \"btn btn-secondary\",\r\n            },\r\n          ]}\r\n        >\r\n          ¿Desea eliminar actividad?\r\n        </BaseDialog>\r\n      )}\r\n    </BaseCardSection>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport { actions } from \"../_redux/annRedux\";\r\n\r\nimport BaseModal from \"../../../components/UI/BaseModal.jsx\";\r\n\r\nconst initialValues = {\r\n  Title: \"\",\r\n  Description: \"\",\r\n};\r\n\r\nfunction CreateAnnDialog({ open, handleClose }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const annSchema = Yup.object().shape({\r\n    Title: Yup.string().required(\"Campo requerido\"),\r\n    Description: Yup.string().required(\"Campo requerido\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: annSchema,\r\n    onSubmit: (values, { setStatus, setSubmitting }) => {\r\n      setTimeout(() => {\r\n        handleCreate(values);\r\n      }, 1000);\r\n    },\r\n  });\r\n\r\n  const handleCreate = (values) => {\r\n    dispatch(actions.createAnnouncement(values)).then(() => handleClose());\r\n  };\r\n\r\n  const actionButtons = [\r\n    {\r\n      content: \"Publicar anuncio\",\r\n      onClick: formik.handleSubmit,\r\n      type: \"submit\",\r\n    },\r\n    {\r\n      content: \"Cancelar\",\r\n      onClick: () => handleClose(),\r\n      className: \"btn btn-secondary\",\r\n      type: \"button\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <BaseModal\r\n      title=\"Crear nuevo anuncio\"\r\n      open={open}\r\n      actions={actionButtons}\r\n      handleClose={handleClose}\r\n    >\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"Title\">Título del anuncio</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"Title\"\r\n            className={`form-control ${\r\n              formik.touched.Title\r\n                ? formik.errors.Title\r\n                  ? \"is-invalid\"\r\n                  : \"is-valid\"\r\n                : \"\"\r\n            }`}\r\n            {...formik.getFieldProps(\"Title\")}\r\n          />\r\n          <div className=\"invalid-feedback\">{formik.errors.Title}</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"Description\">Contenido del anuncio</label>\r\n          <textarea\r\n            type=\"text\"\r\n            name=\"Description\"\r\n            className={`form-control ${\r\n              formik.touched.Description\r\n                ? formik.errors.Description\r\n                  ? \"is-invalid\"\r\n                  : \"is-valid\"\r\n                : \"\"\r\n            }`}\r\n            {...formik.getFieldProps(\"Description\")}\r\n            style={{ minHeight: \"150px\" }}\r\n          />\r\n          <div className=\"invalid-feedback\">{formik.errors.Description}</div>\r\n        </div>\r\n      </form>\r\n    </BaseModal>\r\n  );\r\n}\r\n\r\nexport default CreateAnnDialog;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport { actions } from \"../_redux/annRedux\";\r\n\r\nimport BaseModal from \"../../../components/UI/BaseModal.jsx\";\r\n\r\nfunction UpdateAnnDialog({ open, handleClose, announcement }) {\r\n  const dispatch = useDispatch();\r\n  const initialValues = {\r\n    Title: announcement.Title,\r\n    Description: announcement.Description,\r\n  };\r\n\r\n  const annSchema = Yup.object().shape({\r\n    Title: Yup.string().required(\"Campo requerido\"),\r\n    Description: Yup.string().required(\"Campo requerido\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: annSchema,\r\n    onSubmit: (values, { setStatus, setSubmitting }) => {\r\n      setTimeout(() => {\r\n        handleUpdate(values);\r\n      }, 1000);\r\n    },\r\n  });\r\n\r\n  const handleUpdate = (values) => {\r\n    dispatch(\r\n      actions.updateAnnouncement({ ...announcement, ...values })\r\n    ).then(() => handleClose());\r\n  };\r\n\r\n  const actionButtons = [\r\n    {\r\n      content: \"Actualizar anuncio\",\r\n      onClick: formik.handleSubmit,\r\n    },\r\n    {\r\n      content: \"Cancelar\",\r\n      onClick: () => handleClose(),\r\n      className: \"btn btn-secondary\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <BaseModal\r\n      title=\"Actualizar anuncio\"\r\n      open={open}\r\n      actions={actionButtons}\r\n      handleClose={handleClose}\r\n    >\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"Title\">Título del anuncio</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"Title\"\r\n            className={`form-control ${\r\n              formik.touched.Title\r\n                ? formik.errors.Title\r\n                  ? \"is-invalid\"\r\n                  : \"is-valid\"\r\n                : \"\"\r\n            }`}\r\n            {...formik.getFieldProps(\"Title\")}\r\n          />\r\n          <div className=\"invalid-feedback\">{formik.errors.Title}</div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"Description\">Contenido del anuncio</label>\r\n          <textarea\r\n            type=\"text\"\r\n            name=\"Description\"\r\n            className={`form-control ${\r\n              formik.touched.Description\r\n                ? formik.errors.Description\r\n                  ? \"is-invalid\"\r\n                  : \"is-valid\"\r\n                : \"\"\r\n            }`}\r\n            {...formik.getFieldProps(\"Description\")}\r\n            style={{ minHeight: \"150px\" }}\r\n          />\r\n          <div className=\"invalid-feedback\">{formik.errors.Description}</div>\r\n        </div>\r\n      </form>\r\n    </BaseModal>\r\n  );\r\n}\r\n\r\nexport default UpdateAnnDialog;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport CreateAnnDialog from \"app/modules/Announcements/components/CreateAnnDialog.jsx\";\r\nimport { actions } from \"../modules/Announcements/_redux/annRedux\";\r\nimport UpdateAnnDialog from \"app/modules/Announcements/components/UpdateAnnDialog.jsx\";\r\nimport BaseCardSection from \"app/components/UI/BaseCardSection.jsx\";\r\nimport BaseDialog from \"app/components/UI/BaseDialog\";\r\n\r\nfunction Announcements() {\r\n  const { announcementslist } = useSelector((state) => state.announcements);\r\n  const dispatch = useDispatch();\r\n\r\n  const [openCreateDialog, setOpenCreateDialog] = React.useState(false);\r\n  const [openUpdateDialog, setOpenUpdateDialog] = React.useState(false);\r\n  const [confirmDelete, setConfirmDelete] = React.useState(false);\r\n  const [annValue, setAnnValue] = React.useState(undefined);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getAnnouncementsList());\r\n  }, [dispatch]);\r\n\r\n  const dispatchDelete = ({ ID }) => {\r\n    dispatch(actions.deleteAnnouncement(ID)).then(() =>\r\n      setConfirmDelete(false)\r\n    );\r\n  };\r\n\r\n  const handleDelete = (values) => {\r\n    setAnnValue(values);\r\n    setConfirmDelete(true);\r\n  };\r\n\r\n  const handleUpdate = (values) => {\r\n    setAnnValue(values);\r\n    setOpenUpdateDialog(true);\r\n  };\r\n\r\n  return (\r\n    <BaseCardSection\r\n      title=\"Anuncios\"\r\n      toolbar={[\r\n        {\r\n          className: \"btn btn-primary btn-circle font-weight-bolder\",\r\n          onClick: () => setOpenCreateDialog(true),\r\n          title: \"Crear anuncio\",\r\n        },\r\n      ]}\r\n      style={{ backgroundColor: \"#f3f6f9\" }}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* anuncios */}\r\n        {announcementslist.map((value, index) => (\r\n          <div key={index} className=\"row\">\r\n            {/* Card */}\r\n            <div className=\"card custom-card p-3 mb-5 rounded\">\r\n              {/* Card::body */}\r\n              <div className=\"card-body pt-3\">\r\n                {/* Card::body::title */}\r\n                <div className=\"card-title\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      <strong className=\"align-self-center\">\r\n                        {value.Title}\r\n                      </strong>\r\n                    </div>\r\n                    <div className=\"col text-right\">\r\n                      <a\r\n                        className=\"btn btn-info font-weight-bolder font-size-sm mr-3\"\r\n                        onClick={() => handleUpdate(value)}\r\n                        title=\"editar\"\r\n                      >\r\n                        <EditIcon />\r\n                      </a>\r\n                      <a\r\n                        className=\"btn btn-danger font-weight-bolder font-size-sm mr-3\"\r\n                        onClick={() => handleDelete(value)}\r\n                        title=\"eliminar\"\r\n                      >\r\n                        <DeleteIcon />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Card::body::info */}\r\n                <div className=\"card-body p-0\">{value.Description}</div>\r\n                <div className=\"card-body p-0 pt-2\">\r\n                  <small className=\"text-muted font-weight-bold d-block\">\r\n                    {moment(value.CreationDate).format(\"DD-MM-YYYY\")}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {openCreateDialog && (\r\n        <CreateAnnDialog\r\n          open={openCreateDialog}\r\n          handleClose={() => setOpenCreateDialog(false)}\r\n        />\r\n      )}\r\n\r\n      {openUpdateDialog && (\r\n        <UpdateAnnDialog\r\n          open={openUpdateDialog}\r\n          handleClose={() => setOpenUpdateDialog(false)}\r\n          announcement={annValue}\r\n        />\r\n      )}\r\n\r\n      {confirmDelete && (\r\n        <BaseDialog\r\n          open={confirmDelete}\r\n          onClose={() => setConfirmDelete(false)}\r\n          actions={[\r\n            {\r\n              content: \"Confirmar\",\r\n              onClick: () => dispatchDelete(annValue),\r\n              color: \"primary\",\r\n            },\r\n            {\r\n              content: \"Cancelar\",\r\n              onClick: () => setConfirmDelete(false),\r\n              className: \"btn btn-secondary\",\r\n            },\r\n          ]}\r\n        >\r\n          ¿Desea eliminar el anuncio?\r\n        </BaseDialog>\r\n      )}\r\n    </BaseCardSection>\r\n  );\r\n}\r\n\r\nexport default Announcements;\r\n","import { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nfunction CCaseForm(props) {\r\n  const { handleSubmit, handleClose, clinical_case } = props;\r\n\r\n  const initialValues = {\r\n    Title: clinical_case ? clinical_case.Title : \"\",\r\n    Description: clinical_case ? clinical_case.Description : \"\",\r\n    Media: clinical_case ? clinical_case.Media : \"\",\r\n  };\r\n\r\n  const activitySchema = Yup.object().shape({\r\n    Title: Yup.string().required(\"Campo requerido\"),\r\n    Description: Yup.string().required(\"Campo requerido\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: activitySchema,\r\n    onSubmit: (values, actions) => {\r\n      setTimeout(() => {\r\n        handleSubmit({\r\n          ...values,\r\n          Difficulty: parseInt(values.Difficulty),\r\n          ClinicalCaseID: parseInt(values.ClinicalCaseID),\r\n          HCNID: parseInt(values.HCNID),\r\n        });\r\n        actions.setSubmitting(false);\r\n      }, 1000);\r\n    },\r\n  });\r\n\r\n  const handleInputsChange = async (event) => {\r\n    if (event.target.type === \"file\") {\r\n      let blobPDF = new Blob([event.target.files[0]], {\r\n        type: \"application/pdf\",\r\n      });\r\n      let reader = new FileReader();\r\n      reader.readAsDataURL(blobPDF);\r\n      reader.onloadend = () => {\r\n        let value = reader.result.split(\",\")[1];\r\n        formik.handleChange(event);\r\n        formik.setFieldValue(\"Media\", value);\r\n      };\r\n    }\r\n  };\r\n\r\n  const actionButtons = [\r\n    {\r\n      content: `${clinical_case ? \"Actualizar\" : \"Crear\"} Caso Clínico`,\r\n      onClick: formik.handleSubmit,\r\n      type: \"submit\",\r\n    },\r\n    {\r\n      content: \"Cancelar\",\r\n      onClick: () => handleClose(),\r\n      className: \"btn btn-secondary ml-2\",\r\n      type: \"button\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"Title\">Título</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"Title\"\r\n          className=\"form-control\"\r\n          className={`form-control ${\r\n            formik.touched.Title\r\n              ? formik.errors.Title\r\n                ? \"is-invalid\"\r\n                : \"is-valid\"\r\n              : \"\"\r\n          }`}\r\n          {...formik.getFieldProps(\"Title\")}\r\n        />\r\n        <div className=\"invalid-feedback\">{formik.errors.Title}</div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"Description\">Descripción</label>\r\n        <textarea\r\n          type=\"text\"\r\n          name=\"Description\"\r\n          className=\"form-control\"\r\n          style={{ minHeight: \"100px\" }}\r\n          className={`form-control ${\r\n            formik.touched.Description\r\n              ? formik.errors.Description\r\n                ? \"is-invalid\"\r\n                : \"is-valid\"\r\n              : \"\"\r\n          }`}\r\n          {...formik.getFieldProps(\"Description\")}\r\n        />\r\n        <div className=\"invalid-feedback\">{formik.errors.Description}</div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"Media\">Archivo</label>\r\n        <input\r\n          type=\"file\"\r\n          name=\"Media\"\r\n          className=\"ml-2\"\r\n          onChange={handleInputsChange}\r\n        />\r\n        <div className=\"invalid-feedback\">{formik.errors.Media}</div>\r\n      </div>\r\n\r\n      {actionButtons && (\r\n        <div className=\"text-right\">\r\n          {actionButtons.map((action, index) => {\r\n            const { content, ...props } = action;\r\n            return (\r\n              <button\r\n                className={\r\n                  props.className ? props.className : \"btn btn-primary\"\r\n                }\r\n                disabled={formik.isSubmitting}\r\n                key={index}\r\n                {...props}\r\n              >\r\n                {content}\r\n                {props.type === \"submit\" && formik.isSubmitting && (\r\n                  <CircularProgress\r\n                    className=\"ml-2\"\r\n                    size={10}\r\n                    color=\"inherit\"\r\n                  />\r\n                )}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CCaseForm;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { actions } from \"../_redux/ccasesRedux\";\r\nimport BaseModal from \"../../../components/UI/BaseModal.jsx\";\r\nimport CCaseForm from \"../utils/CCaseForm\";\r\n\r\nfunction CreateCCaseDialog({ open, handleClose }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCreate = (values) => {\r\n    dispatch(actions.createCCase(values)).then(() => {\r\n      handleClose();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <BaseModal\r\n      title=\"Crear nuevo caso clínico\"\r\n      open={open}\r\n      handleClose={handleClose}\r\n    >\r\n      <CCaseForm handleSubmit={handleCreate} handleClose={handleClose} />\r\n    </BaseModal>\r\n  );\r\n}\r\n\r\nexport default CreateCCaseDialog;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { actions } from \"../_redux/ccasesRedux\";\r\n\r\nimport BaseModal from \"../../../components/UI/BaseModal.jsx\";\r\n\r\nfunction AddCCaseDialog({ open, handleClose }) {\r\n  const { ccasesList } = useSelector(state => state.clinicalCases);\r\n  const dispatch = useDispatch();\r\n\r\n  const [ ccase_id, setCCaseId ] = React.useState(undefined);\r\n\r\n  const validateInputs = () => {\r\n    let ok = true;\r\n    ok = ok && (ccase_id);\r\n    return ok;\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if(!validateInputs()) return;\r\n    dispatch(actions.addCCaseToCourse(parseInt(ccase_id)))\r\n    .then(() => handleClose())\r\n  };\r\n\r\n\r\n  return (\r\n    <BaseModal\r\n      title=\"Agregar caso clínico\"\r\n      open={open}\r\n      handleClose={() => handleClose()}\r\n      actions={[\r\n        {\r\n          content: \"Añadir\",\r\n          onClick: () => handleAdd()\r\n        },\r\n        {\r\n          content: \"Cancelar\",\r\n          onClick: () => handleClose(),\r\n          className: \"btn btn-secondary\"\r\n        }\r\n      ] }\r\n    >\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"Description\">Casos clínicos</label>\r\n          <select \r\n            name=\"Type\" \r\n            id=\"Type\" \r\n            className=\"form-control\"\r\n            value={ccase_id}\r\n            onChange={event => setCCaseId(event.target.value)}\r\n          >\r\n            <option value=\"\">Seleccionar</option>\r\n            {ccasesList.map(({ ID, Title }) => (\r\n              <option value={ ID } key={ ID }>{ Title }</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </form>\r\n    </BaseModal>\r\n  )\r\n}\r\n\r\nexport default AddCCaseDialog;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { actions } from \"../_redux/ccasesRedux\";\r\nimport BaseModal from \"../../../components/UI/BaseModal.jsx\";\r\nimport CCaseForm from \"../utils/CCaseForm\";\r\n\r\nfunction UpdateCCaseDialog({ open, handleClose, clinical_case }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleUpdate = (values) => {\r\n    dispatch(\r\n      actions.updateCCase({ ID: clinical_case.ID, ...values })\r\n    ).then(() => handleClose());\r\n  };\r\n\r\n  return (\r\n    <BaseModal\r\n      title=\"Actualizar caso clínico\"\r\n      open={open}\r\n      handleClose={handleClose}\r\n    >\r\n      <CCaseForm\r\n        clinical_case={clinical_case}\r\n        handleSubmit={handleUpdate}\r\n        handleClose={handleClose}\r\n      />\r\n    </BaseModal>\r\n  );\r\n}\r\n\r\nexport default UpdateCCaseDialog;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport { actions } from \"../modules/ClinicalCases/_redux/ccasesRedux\";\r\nimport CreateCCaseDialog from \"../modules/ClinicalCases/components/CreateCCaseDialog.jsx\";\r\nimport AddCCaseDialog from \"../modules/ClinicalCases/components/AddCCaseDialog\";\r\nimport UpdateCCaseDialog from \"../modules/ClinicalCases/components/UpdateCCaseDialog\";\r\nimport BaseCardSection from \"../components/UI/BaseCardSection\";\r\nimport BaseDialog from \"app/components/UI/BaseDialog\";\r\n\r\nfunction CCasesPage() {\r\n  const { ccasesListByCourse } = useSelector((state) => state.clinicalCases);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [openCreateDialog, setOpenCreateDialog] = React.useState(false);\r\n  const [openUpdateDialog, setOpenUpdateDialog] = React.useState(false);\r\n  const [openAddDialog, setOpenAddDialog] = React.useState(false);\r\n  const [confirmDelete, setConfirmDelete] = React.useState({\r\n    value: false,\r\n    func: () => {},\r\n  });\r\n  const [ccaseValue, setCcaseValue] = React.useState(undefined);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getCCasesListByCourse());\r\n  }, [dispatch]);\r\n\r\n  const handleUpdate = (data) => {\r\n    setCcaseValue(data);\r\n    console.log(data);\r\n    setOpenUpdateDialog(true);\r\n  };\r\n\r\n  const closeDeleteModal = () =>\r\n    setConfirmDelete((prevState) => ({ ...prevState, value: false }));\r\n\r\n  const dispatchDelete = ({ ID }) => {\r\n    dispatch(actions.deleteCCaseByCourse(ID)).then(() => closeDeleteModal());\r\n  };\r\n\r\n  const dispatchRemove = ({ ID }) => {\r\n    dispatch(actions.removeCCase(ID)).then(() => closeDeleteModal());\r\n  };\r\n\r\n  const handleDelete = (values, func) => {\r\n    setCcaseValue(values);\r\n    setConfirmDelete({ value: true, func });\r\n  };\r\n\r\n  return (\r\n    <BaseCardSection\r\n      title=\"Casos Clínicos\"\r\n      toolbar={[\r\n        {\r\n          title: \"Agregar\",\r\n          className: \"btn btn-primary btn-circle font-weight-bolder\",\r\n          onClick: () => setOpenAddDialog(true),\r\n        },\r\n        {\r\n          title: \"Crear caso clínico\",\r\n          className: \"btn btn-primary btn-circle font-weight-bolder ml-2\",\r\n          onClick: () => setOpenCreateDialog(true),\r\n        },\r\n      ]}\r\n      style={{ backgroundColor: \"#f3f6f9\" }}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {ccasesListByCourse.map((value, index) => (\r\n          <div key={index} className=\"row\">\r\n            {/* Card */}\r\n            <div className=\"card custom-card p-3 mb-5 bg-white rounded\">\r\n              {/* Card::body */}\r\n              <div className=\"card-body pt-3\">\r\n                {/* Card::body::title */}\r\n                <div className=\"card-title\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      <strong className=\"align-self-center\">\r\n                        {value.Title}\r\n                      </strong>\r\n                    </div>\r\n                    <div className=\"col text-right\">\r\n                      <a\r\n                        className=\"btn btn-primary font-weight-bolder font-size-sm mr-3\"\r\n                        onClick={() => {\r\n                          history.push(`/clinical-cases/${value.ID}`);\r\n                        }}\r\n                        title=\"ver\"\r\n                      >\r\n                        <VisibilityIcon />\r\n                      </a>\r\n                      <a\r\n                        className=\"btn btn-info font-weight-bolder font-size-sm mr-3\"\r\n                        onClick={() => handleUpdate(value)}\r\n                        title=\"editar\"\r\n                      >\r\n                        <EditIcon />\r\n                      </a>\r\n                      <a\r\n                        className=\"btn btn-danger font-weight-bolder font-size-sm mr-3\"\r\n                        onClick={() => handleDelete(value, dispatchRemove)}\r\n                        title=\"remover de este curso\"\r\n                      >\r\n                        <RemoveCircleIcon />\r\n                      </a>\r\n                      <a\r\n                        className=\"btn btn-danger font-weight-bolder font-size-sm mr-3\"\r\n                        onClick={() => handleDelete(value, dispatchDelete)}\r\n                        title=\"Eliminar de forma permanente\"\r\n                      >\r\n                        <DeleteIcon />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Card::body::info */}\r\n                <div className=\"card-body p-0\">{value.Description}</div>\r\n                <div className=\"card-body p-0 pt-2\">\r\n                  <small className=\"text-muted font-weight-bold d-block\">\r\n                    {moment(value.CreationDate).format(\"DD-MM-YYYY\")}\r\n                  </small>\r\n                </div>\r\n                <div className=\"card-body p-0 pt-2\">\r\n                  <strong>Contiene:</strong>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {openCreateDialog && (\r\n        <CreateCCaseDialog\r\n          open={openCreateDialog}\r\n          handleClose={() => setOpenCreateDialog(false)}\r\n        />\r\n      )}\r\n\r\n      {openAddDialog && (\r\n        <AddCCaseDialog\r\n          open={openAddDialog}\r\n          handleClose={() => setOpenAddDialog(false)}\r\n        />\r\n      )}\r\n\r\n      {openUpdateDialog && (\r\n        <UpdateCCaseDialog\r\n          open={openUpdateDialog}\r\n          handleClose={() => setOpenUpdateDialog(false)}\r\n          clinical_case={ccaseValue}\r\n        />\r\n      )}\r\n\r\n      {confirmDelete.value && (\r\n        <BaseDialog\r\n          open={confirmDelete.value}\r\n          onClose={() =>\r\n            setConfirmDelete((prevState) => ({ ...prevState, value: false }))\r\n          }\r\n          actions={[\r\n            {\r\n              content: \"Confirmar\",\r\n              onClick: () => confirmDelete.func(ccaseValue),\r\n              color: \"primary\",\r\n            },\r\n            {\r\n              content: \"Cancelar\",\r\n              onClick: () =>\r\n                setConfirmDelete((prevState) => ({\r\n                  ...prevState,\r\n                  value: false,\r\n                })),\r\n              className: \"btn btn-secondary\",\r\n            },\r\n          ]}\r\n        >\r\n          ¿Desea realizar dicha acción?\r\n        </BaseDialog>\r\n      )}\r\n    </BaseCardSection>\r\n  );\r\n}\r\n\r\nexport default CCasesPage;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { actions as hcnRedux } from \"../_redux/hcnRedux\";\r\n\r\nimport BaseModal from \"../../../components/UI/BaseModal.jsx\";\r\n\r\nfunction AddHcnDialog({ open, handleClose }) {\r\n  const { hcnList } = useSelector((state) => state.hcn);\r\n  const dispatch = useDispatch();\r\n\r\n  const [hcn_id, setHcnId] = React.useState(undefined);\r\n\r\n  const validateInputs = () => {\r\n    let ok = true;\r\n    ok = ok && hcn_id;\r\n    return ok;\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    if (!validateInputs()) return;\r\n    dispatch(hcnRedux.addHcnToCourse(parseInt(hcn_id))).then(() =>\r\n      handleClose()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BaseModal\r\n      title=\"Agregar HCN\"\r\n      open={open}\r\n      handleClose={() => handleClose()}\r\n      actions={[\r\n        {\r\n          content: \"Añadir\",\r\n          onClick: () => handleAdd(),\r\n        },\r\n        {\r\n          content: \"Cancelar\",\r\n          onClick: () => handleClose(),\r\n          className: \"btn btn-secondary\",\r\n        },\r\n      ]}\r\n    >\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"Description\">Casos clínicos</label>\r\n          <select\r\n            name=\"Type\"\r\n            id=\"Type\"\r\n            className=\"form-control\"\r\n            value={hcn_id}\r\n            onChange={(event) => setHcnId(event.target.value)}\r\n          >\r\n            <option value=\"\">Seleccionar</option>\r\n            {hcnList.map(({ ID }) => (\r\n              <option value={ID} key={ID}>\r\n                {ID}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </form>\r\n    </BaseModal>\r\n  );\r\n}\r\n\r\nexport default AddHcnDialog;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, NavLink } from \"react-router-dom\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircle\";\r\nimport { actions as hcnRedux } from \"../modules/HCN/_redux/hcnRedux\";\r\nimport BaseSection from \"../components/UI/BaseSection\";\r\nimport AddHcnDialog from \"../modules/HCN/components/AddHcnDialog.jsx\";\r\nimport CardGridContainer from \"../components/UI/CardGridContainer\";\r\nimport BaseDialog from \"app/components/UI/BaseDialog\";\r\n\r\nfunction HcnPage() {\r\n  const { hcnListByCourse, hcnObject } = useSelector((state) => state.hcn);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [openAddDialog, setOpenAddDialog] = React.useState(false);\r\n  const [confirmDelete, setConfirmDelete] = React.useState({\r\n    value: false,\r\n    func: () => {},\r\n  });\r\n  const [hcnValue, setHcnValue] = React.useState(undefined);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(hcnRedux.getHcnListByCourse());\r\n  }, [dispatch]);\r\n\r\n  const closeDeleteModal = () =>\r\n    setConfirmDelete((prevState) => ({ ...prevState, value: false }));\r\n\r\n  const dispatchDelete = ({ HCNID }) => {\r\n    dispatch(hcnRedux.deleteHcn(HCNID)).then(() => closeDeleteModal());\r\n  };\r\n\r\n  const dispatchRemove = ({ HCNID }) => {\r\n    dispatch(hcnRedux.removeHcn(HCNID)).then(() => closeDeleteModal());\r\n  };\r\n\r\n  const handleDelete = (values, func) => {\r\n    setHcnValue(values);\r\n    setConfirmDelete({ value: true, func });\r\n  };\r\n\r\n  return (\r\n    <BaseSection\r\n      title=\"Historias Clínicas Nutricionales\"\r\n      toolbar={[\r\n        {\r\n          title: \"Agregar\",\r\n          className: \"btn btn-primary btn-circle font-weight-bolder\",\r\n          onClick: () => setOpenAddDialog(true),\r\n        },\r\n        {\r\n          className: \"btn btn-primary btn-circle font-weight-bolder ml-2\",\r\n          onClick: () => history.push(\"/hcn/create\"),\r\n          title: \"Crear HCN\",\r\n        },\r\n      ]}\r\n    >\r\n      <CardGridContainer data={hcnListByCourse}>\r\n        {(hcn) =>\r\n          hcnObject[hcn.HCNID] && (\r\n            <div className=\"card custom-card\" style={{ height: \"150px\" }}>\r\n              <div className=\"card-header text-right\">\r\n                <a\r\n                  className=\"btn btn-danger font-weight-bolder font-size-sm mr-3\"\r\n                  onClick={() => handleDelete(hcn, dispatchRemove)}\r\n                  title=\"remover de este curso\"\r\n                >\r\n                  <RemoveCircleIcon />\r\n                </a>\r\n\r\n                <a\r\n                  className=\"btn btn-danger font-weight-bolder font-size-sm\"\r\n                  onClick={() => handleDelete(hcn, dispatchDelete)}\r\n                  title=\"Eliminar de forma permanente\"\r\n                >\r\n                  <DeleteIcon />\r\n                </a>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <NavLink to={`/hcn/update/${hcnObject[hcn.HCNID].MongoID}`}>\r\n                  <div className=\"d-flex justify-content-center align-items-center h-100\">\r\n                    <div className=\"d-flex flex-column align-items-center\">\r\n                      <span className=\"mt-1\">{hcn.HCNID}</span>\r\n                    </div>\r\n                  </div>\r\n                </NavLink>\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n      </CardGridContainer>\r\n\r\n      {openAddDialog && (\r\n        <AddHcnDialog\r\n          open={openAddDialog}\r\n          handleClose={() => setOpenAddDialog(false)}\r\n        />\r\n      )}\r\n\r\n      {confirmDelete.value && (\r\n        <BaseDialog\r\n          open={confirmDelete.value}\r\n          onClose={() =>\r\n            setConfirmDelete((prevState) => ({ ...prevState, value: false }))\r\n          }\r\n          actions={[\r\n            {\r\n              content: \"Confirmar\",\r\n              onClick: () => confirmDelete.func(hcnValue),\r\n              color: \"primary\",\r\n            },\r\n            {\r\n              content: \"Cancelar\",\r\n              onClick: () =>\r\n                setConfirmDelete((prevState) => ({\r\n                  ...prevState,\r\n                  value: false,\r\n                })),\r\n              className: \"btn btn-secondary\",\r\n            },\r\n          ]}\r\n        >\r\n          ¿Desea realizar dicha acción?\r\n        </BaseDialog>\r\n      )}\r\n    </BaseSection>\r\n  );\r\n}\r\n\r\nexport default HcnPage;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport BaseCardSection from \"app/components/UI/BaseCardSection.jsx\";\r\nimport { actions } from \"app/modules/Activities/_redux/activitiesRedux\";\r\nimport AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\r\n\r\nfunction GradePage(props) {\r\n  const { id } = props.match.params;\r\n  const { gradeList, studentsList, user } = useSelector(\r\n    ({ activities, students, auth }) => ({\r\n      gradeList: activities.gradeList,\r\n      studentsList: students.studentsList,\r\n      user: auth.user,\r\n    })\r\n  );\r\n  const [studentData, setStudentData] = React.useState({});\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getAllSolvedHcn(id));\r\n  }, [dispatch, id]);\r\n\r\n  React.useEffect(() => {\r\n    if (studentsList.length) {\r\n      let student_data = {};\r\n      studentsList.forEach((student) => {\r\n        student_data[student.ID] = { ...student };\r\n      });\r\n      setStudentData(student_data);\r\n    }\r\n  }, [studentsList]);\r\n\r\n  return (\r\n    <BaseCardSection title=\"Calificar\" style={{ backgroundColor: \"#f3f6f9\" }}>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col mr-3\">\r\n            <h5 className=\"mb-3\">Por calificar</h5>\r\n            {gradeList\r\n              .filter((element) => !element.Reviewed)\r\n              .map((value, index) => (\r\n                <div key={index} className=\"row\">\r\n                  {/* Card */}\r\n                  <div className=\"card custom-card p-3 mb-5 bg-white rounded\">\r\n                    {/* Card::body */}\r\n                    <div className=\"card-body pt-3\">\r\n                      {/* Card::body::title */}\r\n                      <div className=\"card-title\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col\">\r\n                            <strong className=\"align-self-center\">\r\n                              {studentData[value.Solver]\r\n                                ? studentData[value.Solver].Name\r\n                                : user.Name}\r\n                            </strong>\r\n                          </div>\r\n                          <div className=\"col text-right\">\r\n                            <a\r\n                              className=\"btn btn-primary font-weight-bolder font-size-sm mr-3\"\r\n                              title=\"calificar\"\r\n                              onClick={() => {\r\n                                history.push(\r\n                                  `/hcn/feedback/${id}/${value.MongoID}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              <AssignmentTurnedInIcon />\r\n                            </a>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n\r\n          <div className=\"col\">\r\n            <h5 className=\"mb-3\">Calificadas</h5>\r\n            {gradeList\r\n              .filter((element) => element.Reviewed)\r\n              .map((value, index) => (\r\n                <div key={index} className=\"row\">\r\n                  {/* Card */}\r\n                  <div className=\"card custom-card p-3 mb-5 bg-white rounded\">\r\n                    {/* Card::body */}\r\n                    <div className=\"card-body pt-3\">\r\n                      {/* Card::body::title */}\r\n                      <div className=\"card-title\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col\">\r\n                            <strong className=\"align-self-center\">\r\n                              {studentData[value.Solver]\r\n                                ? studentData[value.Solver].Name\r\n                                : user.Name}\r\n                            </strong>\r\n                          </div>\r\n                          <div className=\"col text-right\">\r\n                            <a\r\n                              className=\"btn btn-primary font-weight-bolder font-size-sm mr-3\"\r\n                              title=\"calificar\"\r\n                              onClick={() => {\r\n                                history.push(\r\n                                  `/hcn/feedback/${id}/${value.MongoID}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              <AssignmentTurnedInIcon />\r\n                            </a>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </BaseCardSection>\r\n  );\r\n}\r\n\r\nexport default GradePage;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport BaseCardSection from \"app/components/UI/BaseCardSection.jsx\";\r\nimport { actions } from \"app/modules/Courses/_redux/coursesRedux\";\r\n\r\nexport default function StudentsPage() {\r\n  const { studentsList } = useSelector((state) => state.courses.currentCourse);\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(actions.getAllStudentsCourse());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <BaseCardSection title=\"Estudiantes\" style={{ backgroundColor: \"#f3f6f9\" }}>\r\n      <div className=\"container-fluid\">\r\n        {/* anuncios */}\r\n        {studentsList.map((value, index) => (\r\n          <div key={index} className=\"row\">\r\n            {/* Card */}\r\n            <div className=\"card custom-card p-3 mb-5 rounded\">\r\n              {/* Card::body */}\r\n              <div className=\"card-body pt-3\">\r\n                {/* Card::body::title */}\r\n                <div className=\"card-title\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col\">\r\n                      <strong className=\"align-self-center\">\r\n                        {value.Name}\r\n                      </strong>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </BaseCardSection>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Redirect, Switch, Route } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { actions } from \"../Courses/_redux/coursesRedux\";\r\n\r\nimport Activities from \"app/pages/Activities.jsx\";\r\nimport Announcements from \"app/pages/Announcements.jsx\";\r\nimport CCasesPage from \"app/pages/CCasesPage.jsx\";\r\nimport HcnPage from \"app/pages/HcnPage.jsx\";\r\nimport GradePage from \"app/pages/GradePage\";\r\nimport StudentsPage from \"app/pages/StudentsPage\";\r\n\r\nexport default function CoursesRoute() {\r\n  const { currentCourse } = useSelector((state) => state.courses);\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    if (currentCourse.id) {\r\n      dispatch(actions.getCourseData(currentCourse.id));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Switch>\r\n      <Redirect exact={true} from=\"/courses\" to=\"/courses/announcements\" />\r\n      {currentCourse.id ? (\r\n        <>\r\n          <Route\r\n            exact={true}\r\n            path=\"/courses/announcements\"\r\n            component={Announcements}\r\n          />\r\n          <Route\r\n            exact={true}\r\n            path=\"/courses/activities\"\r\n            component={Activities}\r\n          />\r\n          <Route\r\n            exact={true}\r\n            path=\"/courses/activities/:id\"\r\n            component={(props) => <GradePage {...props} />}\r\n          />\r\n          <Route\r\n            exact={true}\r\n            path=\"/courses/clinical-cases\"\r\n            component={CCasesPage}\r\n          />\r\n          <Route\r\n            exact={true}\r\n            path=\"/courses/students\"\r\n            component={StudentsPage}\r\n          />\r\n          <Route exact={true} path=\"/courses/hcn\" component={HcnPage} />\r\n        </>\r\n      ) : (\r\n        <Redirect to=\"/courses/all\" />\r\n      )}\r\n\r\n      <Redirect to=\"/error/404\" />\r\n    </Switch>\r\n  );\r\n}\r\n"],"sourceRoot":""}